// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "odbc_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// list_drivers_
Rcpp::DataFrame list_drivers_();
RcppExport SEXP odbc_list_drivers_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(list_drivers_());
    return rcpp_result_gen;
END_RCPP
}
// list_data_sources_
Rcpp::DataFrame list_data_sources_();
RcppExport SEXP odbc_list_data_sources_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(list_data_sources_());
    return rcpp_result_gen;
END_RCPP
}
// odbc_connect
connection_ptr odbc_connect(std::string const& connection_string, std::string const& timezone);
RcppExport SEXP odbc_odbc_connect(SEXP connection_stringSEXP, SEXP timezoneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string const& >::type connection_string(connection_stringSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type timezone(timezoneSEXP);
    rcpp_result_gen = Rcpp::wrap(odbc_connect(connection_string, timezone));
    return rcpp_result_gen;
END_RCPP
}
// connection_info
Rcpp::List connection_info(connection_ptr const& p);
RcppExport SEXP odbc_connection_info(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr const& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_info(p));
    return rcpp_result_gen;
END_RCPP
}
// connection_quote
std::string connection_quote(connection_ptr const& p);
RcppExport SEXP odbc_connection_quote(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr const& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_quote(p));
    return rcpp_result_gen;
END_RCPP
}
// connection_release
void connection_release(connection_ptr p);
RcppExport SEXP odbc_connection_release(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    connection_release(p);
    return R_NilValue;
END_RCPP
}
// connection_begin
void connection_begin(connection_ptr const& p);
RcppExport SEXP odbc_connection_begin(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr const& >::type p(pSEXP);
    connection_begin(p);
    return R_NilValue;
END_RCPP
}
// connection_commit
void connection_commit(connection_ptr const& p);
RcppExport SEXP odbc_connection_commit(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr const& >::type p(pSEXP);
    connection_commit(p);
    return R_NilValue;
END_RCPP
}
// connection_rollback
void connection_rollback(connection_ptr const& p);
RcppExport SEXP odbc_connection_rollback(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr const& >::type p(pSEXP);
    connection_rollback(p);
    return R_NilValue;
END_RCPP
}
// connection_valid
bool connection_valid(connection_ptr const& p);
RcppExport SEXP odbc_connection_valid(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr const& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_valid(p));
    return rcpp_result_gen;
END_RCPP
}
// connection_sql_tables
Rcpp::DataFrame connection_sql_tables(connection_ptr const& p, SEXP catalog_name, SEXP schema_name, SEXP table_name, SEXP table_type);
RcppExport SEXP odbc_connection_sql_tables(SEXP pSEXP, SEXP catalog_nameSEXP, SEXP schema_nameSEXP, SEXP table_nameSEXP, SEXP table_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr const& >::type p(pSEXP);
    Rcpp::traits::input_parameter< SEXP >::type catalog_name(catalog_nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type schema_name(schema_nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type table_name(table_nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type table_type(table_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_sql_tables(p, catalog_name, schema_name, table_name, table_type));
    return rcpp_result_gen;
END_RCPP
}
// connection_sql_columns
Rcpp::DataFrame connection_sql_columns(connection_ptr const& p, std::string const& column_name, std::string const& catalog_name, std::string const& schema_name, std::string const& table_name);
RcppExport SEXP odbc_connection_sql_columns(SEXP pSEXP, SEXP column_nameSEXP, SEXP catalog_nameSEXP, SEXP schema_nameSEXP, SEXP table_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr const& >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type column_name(column_nameSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type catalog_name(catalog_nameSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type schema_name(schema_nameSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type table_name(table_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_sql_columns(p, column_name, catalog_name, schema_name, table_name));
    return rcpp_result_gen;
END_RCPP
}
// result_release
void result_release(result_ptr r);
RcppExport SEXP odbc_result_release(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    result_release(r);
    return R_NilValue;
END_RCPP
}
// result_active
bool result_active(result_ptr const& r);
RcppExport SEXP odbc_result_active(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr const& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(result_active(r));
    return rcpp_result_gen;
END_RCPP
}
// result_completed
bool result_completed(result_ptr const& r);
RcppExport SEXP odbc_result_completed(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr const& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(result_completed(r));
    return rcpp_result_gen;
END_RCPP
}
// new_result
result_ptr new_result(connection_ptr const& p, std::string const& sql);
RcppExport SEXP odbc_new_result(SEXP pSEXP, SEXP sqlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr const& >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type sql(sqlSEXP);
    rcpp_result_gen = Rcpp::wrap(new_result(p, sql));
    return rcpp_result_gen;
END_RCPP
}
// result_fetch
List result_fetch(result_ptr const& r, const int n_max);
RcppExport SEXP odbc_result_fetch(SEXP rSEXP, SEXP n_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr const& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type n_max(n_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(result_fetch(r, n_max));
    return rcpp_result_gen;
END_RCPP
}
// result_column_info
Rcpp::DataFrame result_column_info(result_ptr const& r);
RcppExport SEXP odbc_result_column_info(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr const& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(result_column_info(r));
    return rcpp_result_gen;
END_RCPP
}
// result_bind
void result_bind(result_ptr const& r, List const& params);
RcppExport SEXP odbc_result_bind(SEXP rSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr const& >::type r(rSEXP);
    Rcpp::traits::input_parameter< List const& >::type params(paramsSEXP);
    result_bind(r, params);
    return R_NilValue;
END_RCPP
}
// result_execute
void result_execute(result_ptr const& r);
RcppExport SEXP odbc_result_execute(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr const& >::type r(rSEXP);
    result_execute(r);
    return R_NilValue;
END_RCPP
}
// result_insert_dataframe
void result_insert_dataframe(result_ptr const& r, DataFrame const& df);
RcppExport SEXP odbc_result_insert_dataframe(SEXP rSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr const& >::type r(rSEXP);
    Rcpp::traits::input_parameter< DataFrame const& >::type df(dfSEXP);
    result_insert_dataframe(r, df);
    return R_NilValue;
END_RCPP
}
// result_rows_affected
int result_rows_affected(result_ptr const& r);
RcppExport SEXP odbc_result_rows_affected(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr const& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(result_rows_affected(r));
    return rcpp_result_gen;
END_RCPP
}
// result_row_count
int result_row_count(result_ptr const& r);
RcppExport SEXP odbc_result_row_count(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr const& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(result_row_count(r));
    return rcpp_result_gen;
END_RCPP
}
// column_types
void column_types(DataFrame const& df);
RcppExport SEXP odbc_column_types(SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame const& >::type df(dfSEXP);
    column_types(df);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"odbc_list_drivers_", (DL_FUNC) &odbc_list_drivers_, 0},
    {"odbc_list_data_sources_", (DL_FUNC) &odbc_list_data_sources_, 0},
    {"odbc_odbc_connect", (DL_FUNC) &odbc_odbc_connect, 2},
    {"odbc_connection_info", (DL_FUNC) &odbc_connection_info, 1},
    {"odbc_connection_quote", (DL_FUNC) &odbc_connection_quote, 1},
    {"odbc_connection_release", (DL_FUNC) &odbc_connection_release, 1},
    {"odbc_connection_begin", (DL_FUNC) &odbc_connection_begin, 1},
    {"odbc_connection_commit", (DL_FUNC) &odbc_connection_commit, 1},
    {"odbc_connection_rollback", (DL_FUNC) &odbc_connection_rollback, 1},
    {"odbc_connection_valid", (DL_FUNC) &odbc_connection_valid, 1},
    {"odbc_connection_sql_tables", (DL_FUNC) &odbc_connection_sql_tables, 5},
    {"odbc_connection_sql_columns", (DL_FUNC) &odbc_connection_sql_columns, 5},
    {"odbc_result_release", (DL_FUNC) &odbc_result_release, 1},
    {"odbc_result_active", (DL_FUNC) &odbc_result_active, 1},
    {"odbc_result_completed", (DL_FUNC) &odbc_result_completed, 1},
    {"odbc_new_result", (DL_FUNC) &odbc_new_result, 2},
    {"odbc_result_fetch", (DL_FUNC) &odbc_result_fetch, 2},
    {"odbc_result_column_info", (DL_FUNC) &odbc_result_column_info, 1},
    {"odbc_result_bind", (DL_FUNC) &odbc_result_bind, 2},
    {"odbc_result_execute", (DL_FUNC) &odbc_result_execute, 1},
    {"odbc_result_insert_dataframe", (DL_FUNC) &odbc_result_insert_dataframe, 2},
    {"odbc_result_rows_affected", (DL_FUNC) &odbc_result_rows_affected, 1},
    {"odbc_result_row_count", (DL_FUNC) &odbc_result_row_count, 1},
    {"odbc_column_types", (DL_FUNC) &odbc_column_types, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_odbc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, (Rboolean) FALSE);
}
